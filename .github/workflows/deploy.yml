name: Build and Auto-Deploy Secure Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for OIDC authentication

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    # Create a short SHA for tagging
    - name: Create short SHA
      id: short_sha
      run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

    # Extract metadata for Docker
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository_owner }}/sundai-stocks
        tags: |
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
          type=raw,value=v${{ github.run_number }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
          type=raw,value=${{ steps.short_sha.outputs.sha }},enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

    # Build secure image with NO SECRETS
    - name: Build and push secure Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          DEBUG=False

    # Login to Azure using your managed identity
    - name: Azure Login with OIDC
      if: github.ref == 'refs/heads/main'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Deploy with ONLY secrets - no fallback values exposed
    - name: Auto-deploy to Azure Container Apps
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Deploying secure image with runtime secrets..."
        
        # Update container app with new image and environment variables from secrets only
        az containerapp update \
          --name stocks \
          --resource-group sundai \
          --image ghcr.io/${{ github.repository_owner }}/sundai-stocks:latest \
          --registry-server ghcr.io \
          --registry-username ${{ github.actor }} \
          --registry-password ${{ secrets.GITHUB_TOKEN }} \
          --set-env-vars \
            DASH_USERNAME="${{ secrets.DASH_USERNAME }}" \
            DASH_PASSWORD_HASH="${{ secrets.DASH_PASSWORD_HASH }}" \
            SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            NEWS_API_KEY="${{ secrets.NEWS_API_KEY }}" \
            DEBUG="False"

    # Show successful deployment info
    - name: Deployment completed
      if: github.ref == 'refs/heads/main'
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo ""
        echo "üîí Security Status:"
        echo "   ‚úÖ Secure image built (no secrets in Docker image)"
        echo "   ‚úÖ Pushed to GitHub Packages: ghcr.io/okekedev/sundai-stocks:latest"
        echo "   ‚úÖ Deployed to Azure with runtime environment variables from GitHub Secrets"
        echo "   ‚úÖ All secrets managed securely - none exposed in workflow"
        echo ""
        echo "üåê Your app is live at:"
        echo "   https://stocks.grayocean-b61637cb.southcentralus.azurecontainerapps.io"
        echo ""
        echo "üìä Latest revision info:"
        
        # Show the current active revision
        az containerapp revision list \
          --name stocks \
          --resource-group sundai \
          --query "[?properties.active].{Name:name,Created:properties.createdTime,Traffic:properties.trafficWeight}" \
          --output table